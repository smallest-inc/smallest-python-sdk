# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from smallestai.atoms.models.get_conversation200_response import GetConversation200Response

class TestGetConversation200Response(unittest.TestCase):
    """GetConversation200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> GetConversation200Response:
        """Test GetConversation200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `GetConversation200Response`
        """
        model = GetConversation200Response()
        if include_optional:
            return GetConversation200Response(
                status = True,
                data = atoms_client.models.get_conversation_200_response_data.getConversation_200_response_data(
                    _id = 'abc123', 
                    call_id = 'abc123', 
                    agent = atoms_client.models.agent_dto.AgentDTO(
                        _id = '60d0fe4f5311236168a109ca', 
                        name = 'Customer Support Agent', 
                        description = 'This agent handles customer support inquiries and helps resolve common issues.', 
                        organization = '60d0fe4f5311236168a109cb', 
                        workflow_id = '60d0fe4f5311236168a109cc', 
                        created_by = '60d0fe4f5311236168a109cd', 
                        global_knowledge_base_id = '60d0fe4f5311236168a109ce', 
                        language = atoms_client.models.agent_dto_language.AgentDTO_language(
                            enabled = 'en', 
                            switching = False, 
                            supported = ["en","hi"], ), 
                        synthesizer = atoms_client.models.agent_dto_synthesizer.AgentDTO_synthesizer(
                            voice_config = atoms_client.models.agent_dto_synthesizer_voice_config.AgentDTO_synthesizer_voiceConfig(
                                model = 'waves_lightning_large', 
                                voice_id = 'nyah', 
                                gender = 'female', ), 
                            speed = 1.337, 
                            consistency = 0.5, 
                            similarity = 0, 
                            enhancement = 1, ), 
                        slm_model = 'atoms-slm-v1', 
                        default_variables = {"companyName":"Acme Corp","productName":"Widgets","supportEmail":"support@acmecorp.com"}, 
                        created_at = '2023-01-01T12:00Z', 
                        updated_at = '2023-01-02T14:30Z', ), 
                    status = 'completed', 
                    duration = 300, 
                    recording_url = '', 
                    from = '', 
                    to = '', 
                    transcript = [
                        ''
                        ], 
                    average_transcriber_latency = 1.337, 
                    average_agent_latency = 1.337, 
                    average_synthesizer_latency = 1.337, 
                    type = 'telephony_inbound', )
            )
        else:
            return GetConversation200Response(
        )
        """

    def testGetConversation200Response(self):
        """Test GetConversation200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
