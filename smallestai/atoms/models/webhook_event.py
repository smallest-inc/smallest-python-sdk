# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WebhookEvent(BaseModel):
    """
    WebhookEvent
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the event", alias="_id")
    webhook_id: Optional[StrictStr] = Field(default=None, description="The ID of the webhook", alias="webhookId")
    event_type: Optional[StrictStr] = Field(default=None, description="The type of event", alias="eventType")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="The event payload")
    status: Optional[StrictStr] = Field(default=None, description="The status of the event")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the event was created", alias="createdAt")
    __properties: ClassVar[List[str]] = ["_id", "webhookId", "eventType", "payload", "status", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WebhookEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WebhookEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "webhookId": obj.get("webhookId"),
            "eventType": obj.get("eventType"),
            "payload": obj.get("payload"),
            "status": obj.get("status"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


