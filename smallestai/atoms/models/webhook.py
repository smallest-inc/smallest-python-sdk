# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from smallestai.atoms.models.webhook_subscription_populated import WebhookSubscriptionPopulated
from typing import Optional, Set
from typing_extensions import Self

class Webhook(BaseModel):
    """
    Webhook
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the webhook", alias="_id")
    url: Optional[StrictStr] = Field(default=None, description="The webhook endpoint URL")
    description: Optional[StrictStr] = Field(default=None, description="The description of the webhook")
    status: Optional[StrictStr] = Field(default=None, description="The status of the webhook")
    organization_id: Optional[StrictStr] = Field(default=None, description="The organization ID", alias="organizationId")
    created_by: Optional[StrictStr] = Field(default=None, description="The user ID who created the webhook", alias="createdBy")
    subscriptions: Optional[List[WebhookSubscriptionPopulated]] = Field(default=None, description="A list of subscriptions for the webhook with populated agent details.")
    decrypted_secret_key: Optional[StrictStr] = Field(default=None, description="The decrypted signing secret for the webhook. This is only returned when fetching a single webhook by ID.", alias="decryptedSecretKey")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the webhook was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time when the webhook was last updated", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["_id", "url", "description", "status", "organizationId", "createdBy", "subscriptions", "decryptedSecretKey", "createdAt", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['enabled', 'disabled']):
            raise ValueError("must be one of enum values ('enabled', 'disabled')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Webhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in subscriptions (list)
        _items = []
        if self.subscriptions:
            for _item_subscriptions in self.subscriptions:
                if _item_subscriptions:
                    _items.append(_item_subscriptions.to_dict())
            _dict['subscriptions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Webhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "url": obj.get("url"),
            "description": obj.get("description"),
            "status": obj.get("status"),
            "organizationId": obj.get("organizationId"),
            "createdBy": obj.get("createdBy"),
            "subscriptions": [WebhookSubscriptionPopulated.from_dict(_item) for _item in obj["subscriptions"]] if obj.get("subscriptions") is not None else None,
            "decryptedSecretKey": obj.get("decryptedSecretKey"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


