# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from smallestai.atoms.models.agent_id_workflow_get200_response_data_nodes_inner_data import AgentIdWorkflowGet200ResponseDataNodesInnerData
from smallestai.atoms.models.agent_id_workflow_get200_response_data_nodes_inner_position import AgentIdWorkflowGet200ResponseDataNodesInnerPosition
from typing import Optional, Set
from typing_extensions import Self

class AgentIdWorkflowGet200ResponseDataNodesInner(BaseModel):
    """
    AgentIdWorkflowGet200ResponseDataNodesInner
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the node")
    type: Optional[StrictStr] = Field(default=None, description="Type of the node (e.g., default_node, end_call, pre_call_api)")
    position: Optional[AgentIdWorkflowGet200ResponseDataNodesInnerPosition] = None
    position_absolute: Optional[AgentIdWorkflowGet200ResponseDataNodesInnerPosition] = Field(default=None, alias="positionAbsolute")
    data: Optional[AgentIdWorkflowGet200ResponseDataNodesInnerData] = None
    width: Optional[Union[StrictFloat, StrictInt]] = None
    height: Optional[Union[StrictFloat, StrictInt]] = None
    selected: Optional[StrictBool] = None
    dragging: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["id", "type", "position", "positionAbsolute", "data", "width", "height", "selected", "dragging"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentIdWorkflowGet200ResponseDataNodesInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of position
        if self.position:
            _dict['position'] = self.position.to_dict()
        # override the default output from pydantic by calling `to_dict()` of position_absolute
        if self.position_absolute:
            _dict['positionAbsolute'] = self.position_absolute.to_dict()
        # override the default output from pydantic by calling `to_dict()` of data
        if self.data:
            _dict['data'] = self.data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentIdWorkflowGet200ResponseDataNodesInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "type": obj.get("type"),
            "position": AgentIdWorkflowGet200ResponseDataNodesInnerPosition.from_dict(obj["position"]) if obj.get("position") is not None else None,
            "positionAbsolute": AgentIdWorkflowGet200ResponseDataNodesInnerPosition.from_dict(obj["positionAbsolute"]) if obj.get("positionAbsolute") is not None else None,
            "data": AgentIdWorkflowGet200ResponseDataNodesInnerData.from_dict(obj["data"]) if obj.get("data") is not None else None,
            "width": obj.get("width"),
            "height": obj.get("height"),
            "selected": obj.get("selected"),
            "dragging": obj.get("dragging")
        })
        return _obj


