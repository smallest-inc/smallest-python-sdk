# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from smallestai.atoms.models.agent_dto_language import AgentDTOLanguage
from smallestai.atoms.models.agent_dto_synthesizer import AgentDTOSynthesizer
from typing import Optional, Set
from typing_extensions import Self

class AgentDTO(BaseModel):
    """
    AgentDTO
    """ # noqa: E501
    id: StrictStr = Field(description="The ID of the agent", alias="_id")
    name: StrictStr = Field(description="The name of the agent")
    description: Optional[StrictStr] = Field(default=None, description="The description of the agent")
    organization: Optional[StrictStr] = Field(default=None, description="The organization ID of the agent")
    workflow_id: Optional[StrictStr] = Field(default=None, description="The workflow ID of the agent", alias="workflowId")
    created_by: Optional[StrictStr] = Field(default=None, description="The user ID of the user who created the agent", alias="createdBy")
    global_knowledge_base_id: Optional[StrictStr] = Field(default=None, description="The global knowledge base ID of the agent", alias="globalKnowledgeBaseId")
    language: Optional[AgentDTOLanguage] = None
    synthesizer: Optional[AgentDTOSynthesizer] = None
    slm_model: Optional[StrictStr] = Field(default=None, description="The LLM model to use for the agent. LLM model will be used to generate the response and take decisions based on the user's query.", alias="slmModel")
    default_variables: Optional[Dict[str, Any]] = Field(default=None, description="The default variables to use for the agent. These variables will be used if no variables are provided when initiating a conversation with the agent.", alias="defaultVariables")
    created_at: Optional[datetime] = Field(default=None, description="The date and time when the agent was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time when the agent was last updated", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["_id", "name", "description", "organization", "workflowId", "createdBy", "globalKnowledgeBaseId", "language", "synthesizer", "slmModel", "defaultVariables", "createdAt", "updatedAt"]

    @field_validator('slm_model')
    def slm_model_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['electron-v1', 'electron-v2', 'gpt-4o-mini']):
            raise ValueError("must be one of enum values ('electron-v1', 'electron-v2', 'gpt-4o-mini')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentDTO from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of language
        if self.language:
            _dict['language'] = self.language.to_dict()
        # override the default output from pydantic by calling `to_dict()` of synthesizer
        if self.synthesizer:
            _dict['synthesizer'] = self.synthesizer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentDTO from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "organization": obj.get("organization"),
            "workflowId": obj.get("workflowId"),
            "createdBy": obj.get("createdBy"),
            "globalKnowledgeBaseId": obj.get("globalKnowledgeBaseId"),
            "language": AgentDTOLanguage.from_dict(obj["language"]) if obj.get("language") is not None else None,
            "synthesizer": AgentDTOSynthesizer.from_dict(obj["synthesizer"]) if obj.get("synthesizer") is not None else None,
            "slmModel": obj.get("slmModel"),
            "defaultVariables": obj.get("defaultVariables"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


