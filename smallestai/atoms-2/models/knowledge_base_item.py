# coding: utf-8

"""
    Agent Management API

    API for managing agents, their templates, and call logs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class KnowledgeBaseItem(BaseModel):
    """
    KnowledgeBaseItem
    """ # noqa: E501
    id: StrictStr = Field(description="The unique identifier for the knowledge base item", alias="_id")
    item_type: StrictStr = Field(description="The type of the knowledge base item", alias="itemType")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Additional metadata for the item")
    knowledge_base_id: StrictStr = Field(description="The ID of the knowledge base this item belongs to", alias="knowledgeBaseId")
    processing_status: StrictStr = Field(description="The processing status of the item", alias="processingStatus")
    file_name: Optional[StrictStr] = Field(default=None, description="The name of the file (for file type items)", alias="fileName")
    content_type: Optional[StrictStr] = Field(default=None, description="The MIME type of the content", alias="contentType")
    size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The size of the file in bytes")
    key: Optional[StrictStr] = Field(default=None, description="The storage key for the file")
    title: Optional[StrictStr] = Field(default=None, description="The title of the item")
    content: Optional[StrictStr] = Field(default=None, description="The content of the item (for text type items)")
    created_at: datetime = Field(description="The date and time when the item was created", alias="createdAt")
    updated_at: datetime = Field(description="The date and time when the item was last updated", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["_id", "itemType", "metadata", "knowledgeBaseId", "processingStatus", "fileName", "contentType", "size", "key", "title", "content", "createdAt", "updatedAt"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['file', 'text']):
            raise ValueError("must be one of enum values ('file', 'text')")
        return value

    @field_validator('processing_status')
    def processing_status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pending', 'processing', 'completed', 'failed']):
            raise ValueError("must be one of enum values ('pending', 'processing', 'completed', 'failed')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KnowledgeBaseItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KnowledgeBaseItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_id": obj.get("_id"),
            "itemType": obj.get("itemType"),
            "metadata": obj.get("metadata"),
            "knowledgeBaseId": obj.get("knowledgeBaseId"),
            "processingStatus": obj.get("processingStatus"),
            "fileName": obj.get("fileName"),
            "contentType": obj.get("contentType"),
            "size": obj.get("size"),
            "key": obj.get("key"),
            "title": obj.get("title"),
            "content": obj.get("content"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


